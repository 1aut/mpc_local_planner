#!/usr/bin/env python

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# add_generic_localplanner_params(gen)

grp_collision_avoidance = gen.add_group("Collision Avoidance", type="tab")

grp_collision_avoidance.add("costmap_obstacles_behind_robot_dist", double_t, 0, "", 1.5)
grp_collision_avoidance.add("cutoff_dist", double_t, 0, "", 5)
grp_collision_avoidance.add("enable_dynamic_obstacles", bool_t, 0, "", False)
grp_collision_avoidance.add("force_inclusion_dist", double_t, 0, "", 1.5)
grp_collision_avoidance.add("include_costmap_obstacles", bool_t, 0, "", True)
grp_collision_avoidance.add("min_obstacle_dist", double_t, 0, "", 0.4)

grp_controller = gen.add_group("Controller", type="tab")

grp_controller.add("allow_init_with_backward_motion", bool_t, 0, "", True)
grp_controller.add("force_reinit_new_goal_angular", double_t, 0, "", 1.57)
grp_controller.add("force_reinit_new_goal_dist", double_t, 0, "", 1.0)
grp_controller.add("force_reinit_num_steps", int_t, 0, "", 0)
grp_controller.add("global_plan_overwrite_orientation", bool_t, 0, "", True)
grp_controller.add("global_plan_prune_distance", double_t, 0, "", 1.0)
grp_controller.add("global_plan_viapoint_sep", double_t, 0, "", 0.5)
grp_controller.add("max_global_plan_lookahead_dist", double_t, 0, "", 1.5)
grp_controller.add("outer_ocp_iterations", int_t, 0, "", 1)
grp_controller.add("prefer_x_feedback", bool_t, 0, "", False)
grp_controller.add("publish_ocp_results", bool_t, 0, "", False)
grp_controller.add("xy_goal_tolerance", double_t, 0, "", 0.25)
grp_controller.add("yaw_goal_tolerance", double_t, 0, "", 0.15)
grp_controller.add("print_cpu_time", bool_t, 0, "", False)

grp_grid = gen.add_group("Grid", type="tab")

grp_grid.add("collocation_method", str_t, 0, "", "forward_differences")
grp_grid.add("cost_integration_method", str_t, 0, "", "left_sum") 
grp_grid.add("dt_ref", double_t, 0, "", 0.3)
grp_grid.add("grid_size_ref", int_t, 0, "", 20)
grp_grid.add("grid_type", str_t, 0, "", "fd_grid")
grp_grid.add("warm_start", bool_t, 0, "", True)
grp_grid.add("xf_fixed", str_t, 0, "", "True, True, True")

grp_grid.add("variable_grid_enable", bool_t, 0, "", True)

grp_variable_grid = grp_grid.add_group("Variable Grid", type="hide")

grp_variable_grid.add("variable_grid_min_dt", double_t, 0, "", 0.0)
grp_variable_grid.add("variable_grid_max_dt", double_t, 0, "", 10.0)
grp_variable_grid.add("grid_adaption_enable", bool_t, 0, "", True)

grp_grid_adaption = grp_variable_grid.add_group("Grid Adaption", type="hide")
grp_grid_adaption.add("dt_hyst_ratio", double_t, 0, "", 0.3)
grp_grid_adaption.add("min_grid_size", double_t, 0, "", 2.0)
grp_grid_adaption.add("max_grid_size", double_t, 0, "", 50.0)

grp_planning = gen.add_group("planning", type="tab")

grp_planning.add("planning_objective_type", str_t, 0, "", "minimum_time")

grp_mtvp = grp_planning.add_group("minimum_time_via_points", type="hide")
grp_mtvp.add("orientation_weight", double_t, 0, "", 0.0)
grp_mtvp.add("position_weight", double_t, 0, "", 10.5)
grp_mtvp.add("via_points_ordered", bool_t, 0, "", False)

grp_quadratic_form = grp_planning.add_group("quadratic_form", type="hide")
grp_quadratic_form.add("control_weights", str_t, 0, "", "1.0, 1.0")
grp_quadratic_form.add("state_weights", str_t, 0, "", "2.0, 2.0, 2.0")
grp_quadratic_form.add("integral_form", bool_t, 0, "", False)

grp_planning.add("terminal_constraint_type", str_t, 0, "", "none")
grp_l2_ball = grp_planning.add_group("l2_ball", type="hide")
grp_l2_ball.add("radius", double_t, 0, "", 5.0)
grp_l2_ball.add("weight_matrix", str_t, 0, "", "1.0, 1.0, 1.0")

grp_planning.add("terminal_cost_type", str_t, 0, "", "none")
grp_terminal_cost = grp_planning.add_group("quadratic", type="hide")
grp_terminal_cost.add("final_state_weights", str_t, 0, "", "2.0, 2.0, 2.0")

grp_robot = gen.add_group("Robot", type="tab")
grp_robot.add("robot_type", str_t, 0, "", "unicycle")

grp_unicycle = grp_robot.add_group("unicycle", type="hide")
grp_unicycle.add("max_vel_x", double_t, 0, "", 0.35)
grp_unicycle.add("max_vel_x_backwards", double_t, 0, "", 0.35)
grp_unicycle.add("max_vel_theta", double_t, 0, "", 1.0)
grp_unicycle.add("acc_lim_x", double_t, 0, "", 2.0)
grp_unicycle.add("dec_lim_x", double_t, 0, "", 2.0)
grp_unicycle.add("acc_lim_theta", double_t, 0, "", 2.0)

grp_solver = gen.add_group("Solver", type="tab")
grp_solver.add("solver_type", str_t, 0, "", "ipopt")

grp_ipopt = grp_solver.add_group("ipopt_settings", type="hide")
grp_ipopt.add("ipopt_iterations", int_t, 0, "", 100)
grp_ipopt.add("max_cpu_time", double_t, 0, "", -1.0)
grp_ipopt.add("ipopt_numeric_options", str_t, 0, "", "'tol': 0.0001")
grp_ipopt.add("ipopt_string_options", str_t, 0, "", "'hessian_approximation': 'exact', 'linear_solver': 'mumps'")

grp_lsq_lm = grp_solver.add_group("lsq_lm", type="hide")
grp_lsq_lm.add("lsq_lm_iterations", int_t, 0, "", 100)
grp_lsq_lm.add("weight_init_eq", double_t, 0, "", 2.0)
grp_lsq_lm.add("weight_init_ineq", double_t, 0, "", 2.0)
grp_lsq_lm.add("weight_init_bounds", double_t, 0, "", 2.0)
grp_lsq_lm.add("weight_adapt_factor_eq", double_t, 0, "", 1.5)
grp_lsq_lm.add("weight_adapt_factor_ineq", double_t, 0, "", 1.5)
grp_lsq_lm.add("weight_adapt_factor_bounds", double_t, 0, "", 1.5)
grp_lsq_lm.add("weight_adapt_max_eq", double_t, 0, "", 500.0)
grp_lsq_lm.add("weight_adapt_max_ineq", double_t, 0, "", 500.0)
grp_lsq_lm.add("weight_adapt_max_bounds", double_t, 0, "", 500.0)

exit(gen.generate("mpc_local_planner", "mpc_local_planner", "MpcLocalPlannerReconfigure"))



